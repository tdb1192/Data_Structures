public class Sorts {
	
	public static void insertionSort(int[] a, int n) {
		
		/* 	This sort starts at the second item in the array, and then moves all the way down
			until the end of the array.  At each spot, it compares the value there to the value
			before it. If the value before it is larger, switch the two values.  Follow the
			current value all the way up the array, switching it with the value before it until
			the value before it is not larger.
		*/

		for (int i=1; i<n; i++) {
			int curr = a[i];
			int j = i-1;
			
			while((j>=0) && (a[j] > curr)) {
				a[j+1] = a[j--];
			}
			
			a[j+1] = curr;
		}
	}
	
	public static void insertionSort2(int[] a, int n) {
		
		/*	This sort is almost exactly the same as the other insertionSort().  The only 
			difference is in the definition of the variable in charge or looking 
			"to the left" of the current value
		*/

		for(int i=1; i<n; i++) {
			int curr = a[i];
			int j = i;
			
			while((j>0) && (a[j-1] > curr)) {
				a[j] = a[j-- - 1];
			}
			
			a[j] = curr;
		}
	}
	
	public static void bubbleSort(int[] a, int n) {

		/*
			This sort starts at the beginning of the array and compares adjacent values. If
			the first value is greater than the second value, swap them. Move through to the 
			end of the array, and then repeat the process.  The sort is technically finished
			if no swaps occur, but this version will cycle through the entire array at least
			n-1 times.
		*/
			
	
		for(int j=0; j<n-1; j++) {
			for(int jj=0; jj<n-1; jj++) {
				if(a[jj] >= a[jj+1]) {
					
					int t = a[jj];
					a[jj] = a[jj+1];
					a[jj+1] = t;
				}
			}
		}
	}
}
